plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.6.0'
    id 'org.jetbrains.kotlinx.kover' version '0.4.2'
    id 'application'
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

dependencies {
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    implementation 'org.apache.commons:commons-math3:3.4.1'
    implementation 'com.miglayout:miglayout-swing:5.2'
    implementation 'org.jfree:jfreechart:1.0.19'
    implementation 'com.mashape.unirest:unirest-java:1.4.9'
    implementation 'com.github.lgooddatepicker:LGoodDatePicker:10.3.1'
    implementation 'org.apache.derby:derby:10.14.2.0'
    implementation 'com.amazonaws:aws-java-sdk-elasticsearch:1.11.762'
    implementation 'com.amazonaws:aws-java-sdk-s3:1.11.762'
    implementation 'com.github.awslabs:aws-request-signing-apache-interceptor:b3772780da'
    implementation 'org.elasticsearch.client:elasticsearch-rest-client:7.6.2'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.11.1'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin:2.11.1'
    implementation 'net.lingala.zip4j:zip4j:2.6.4'

    testImplementation "io.mockk:mockk:1.9.3"
    testImplementation "io.kotlintest:kotlintest-assertions:3.4.2"
    testImplementation 'com.github.alexburlton:swing-test:1.0.0'
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.1.0"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.1.0"
}

compileKotlin {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    kotlinOptions {
        jvmTarget = "11"
    }
}

compileTestKotlin {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    kotlinOptions {
        jvmTarget = "11"
    }
}

test {
    useJUnitPlatform()

    jvmArgs '-Dcom.sun.management.jmxremote',
            '-Dcom.sun.management.jmxremote.port=9010',
            '-Dcom.sun.management.jmxremote.authenticate=false',
            '-Dcom.sun.management.jmxremote.ssl=false',
            '-Djava.rmi.server.hostname=localhost',
            '-DscreenshotOs=linux'
}

tasks.withType(Test) {
    minHeapSize = "512m"
    maxHeapSize = "512m"

    testLogging {
        events "failed"
        exceptionFormat "full"
    }
}

task runDev(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath

    args 'devMode', 'trueLaunch'
    main 'dartzee.main.DartsMainKt'
}

task unitTest(type: Test) {
    useJUnitPlatform {
        excludeTags "integration", "e2e"
    }
}

task updateScreenshots(type: Test) {
    jvmArgs '-DupdateSnapshots=true'
    useJUnitPlatform {
        includeTags "screenshot"
    }
}

task integrationAndE2E(type: Test) {
    useJUnitPlatform {
        includeTags "integration", "e2e"
    }
}

jar {
    manifest {
        attributes 'Main-Class': 'dartzee.main.DartsMainKt'
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
    }
}

mainClassName = 'dartzee.main.DartsMainKt'